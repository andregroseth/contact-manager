{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/layout/Header.js","components/pages/About.js","components/pages/NotFound.js","components/test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","a","delete","name","email","phone","className","onClick","style","cursor","float","color","bind","to","marginRight","Contacts","deleteContact","newContacts","Fragment","key","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","defaultProps","AddContact","errors","onSubmit","e","preventDefault","newContact","post","history","push","target","EditContact","updContact","match","params","put","Header","branding","href","About","NotFound","Test","title","userId","completed","fetch","then","response","json","body","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.10936921.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\n\nconst Context = React.createContext();\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'DELETE_CONTACT':\n            return {\n                ...state,\n                contacts: state.contacts.filter((contact) => contact.id !== action.payload)\n            };\n        case 'ADD_CONTACT':\n            return {\n                ...state,\n                contacts: [action.payload, ...state.contacts]\n            };\n        case 'UPDATE_CONTACT':\n            return {\n                ...state,\n                contacts: state.contacts.map((contact) =>\n                    contact.id === action.payload.id ? (contact = action.payload) : contact\n                )\n            };\n        default:\n            return state;\n    }\n};\n\nexport class Provider extends Component {\n    state = {\n        contacts: [],\n        dispatch: (action) => this.setState((state) => reducer(state, action))\n    };\n\n    async componentDidMount() {\n        const res = await axios.get('https://jsonplaceholder.typicode.com/users');\n\n        this.setState({contacts: res.data});\n    }\n\n    render() {\n        return <Context.Provider value={this.state}>{this.props.children}</Context.Provider>;\n    }\n}\n\nexport const Consumer = Context.Consumer;\n","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport {Consumer} from '../../context';\nimport axios from 'axios';\n\nclass Contact extends Component {\n    state = {\n        showContactInfo: false\n    };\n\n    onDeleteClick = async (id, dispatch) => {\n        try {\n            await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\n\n            dispatch({type: 'DELETE_CONTACT', payload: id});\n        } catch (e) {\n            dispatch({type: 'DELETE_CONTACT', payload: id});\n        }\n    };\n\n    render() {\n        const {id, name, email, phone} = this.props.contact;\n        const {showContactInfo} = this.state;\n\n        return (\n            <Consumer>\n                {(value) => {\n                    const {dispatch} = value;\n                    return (\n                        <div className=\"card card-body mb-3\">\n                            <h4>\n                                {name}{' '}\n                                <i\n                                    onClick={() =>\n                                        this.setState({\n                                            showContactInfo: !this.state.showContactInfo\n                                        })\n                                    }\n                                    className=\"fas fa-sort-down\"\n                                    style={{cursor: 'pointer'}}\n                                />\n                                <i\n                                    className=\"fas fa-times\"\n                                    style={{cursor: 'pointer', float: 'right', color: 'red'}}\n                                    onClick={this.onDeleteClick.bind(this, id, dispatch)}\n                                />\n                                <Link to={`contact/edit/${id}`}>\n                                    <i\n                                        className=\"fas fa-pencil-alt\"\n                                        style={{\n                                            cursor: 'pointer',\n                                            float: 'right',\n                                            color: 'black',\n                                            marginRight: '1rem'\n                                        }}\n                                    />\n                                </Link>\n                            </h4>\n                            {showContactInfo ? (\n                                <ul className=\"list-group\">\n                                    <li className=\"list-group-item\">Email: {email}</li>\n                                    <li className=\"list-group-item\">Phone: {phone}</li>\n                                </ul>\n                            ) : null}\n                        </div>\n                    );\n                }}\n            </Consumer>\n        );\n    }\n}\n\nContact.propTypes = {\n    contact: PropTypes.object.isRequired\n};\n\nexport default Contact;\n","import React, {Component} from 'react';\nimport Contact from './Contact';\nimport {Consumer} from '../../context';\n\nclass Contacts extends Component {\n    deleteContact = (id) => {\n        const {contacts} = this.state;\n\n        const newContacts = contacts.filter((contact) => contact.id !== id);\n\n        this.setState({\n            contacts: newContacts\n        });\n    };\n\n    render() {\n        return (\n            <Consumer>\n                {(value) => {\n                    const {contacts} = value;\n                    return (\n                        <React.Fragment>\n                            <h1 className=\"display-4 mb-2\">\n                                <span className=\"text-danger\">Contact</span> List\n                            </h1>\n                            {contacts.map((contact) => (\n                                <Contact key={contact.id} contact={contact} />\n                            ))}\n                        </React.Fragment>\n                    );\n                }}\n            </Consumer>\n        );\n    }\n}\n\nexport default Contacts;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst TextInputGroup = ({label, name, value, placeholder, type, onChange, error}) => {\n    return (\n        <div className=\"form-group\">\n            <label htmlFor={name}>{label}</label>\n            <input\n                type={type}\n                name={name}\n                className={classnames('form-control form-control-lg', {\n                    'is-invalid': error\n                })}\n                placeholder={placeholder}\n                value={value}\n                onChange={onChange}\n            />\n            {error && <div className=\"invalid-feedback\">{error}</div>}\n        </div>\n    );\n};\n\nTextInputGroup.propTypes = {\n    label: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    placeholder: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    error: PropTypes.string.isRequired\n};\n\nTextInputGroup.defaultProps = {\n    type: 'text'\n};\n\nexport default TextInputGroup;\n","import React, {Component} from 'react';\nimport {Consumer} from '../../context';\nimport TextInputGroup from '../layout/TextInputGroup';\nimport axios from 'axios';\n\nclass AddContact extends Component {\n    state = {\n        name: '',\n        email: '',\n        phone: '',\n        errors: {}\n    };\n\n    onSubmit = async (dispatch, e) => {\n        e.preventDefault();\n\n        const {name, email, phone} = this.state;\n\n        // Check For Errors\n        if (name === '') {\n            this.setState({errors: {name: 'Name is required'}});\n            return;\n        }\n\n        if (email === '') {\n            this.setState({errors: {email: 'Email is required'}});\n            return;\n        }\n\n        if (phone === '') {\n            this.setState({errors: {phone: 'phone number is required'}});\n            return;\n        }\n\n        const newContact = {\n            name,\n            email,\n            phone\n        };\n\n        const res = await axios.post('https://jsonplaceholder.typicode.com/users', newContact);\n\n        dispatch({type: 'ADD_CONTACT', payload: res.data});\n\n        // Clear State\n        this.setState({\n            name: '',\n            email: '',\n            phone: '',\n            errors: {}\n        });\n\n        this.props.history.push('/');\n    };\n\n    onChange = (e) => this.setState({[e.target.name]: e.target.value});\n\n    render() {\n        const {name, email, phone, errors} = this.state;\n\n        return (\n            <Consumer>\n                {(value) => {\n                    const {dispatch} = value;\n                    return (\n                        <div className=\"card mb-3\">\n                            <div className=\"card-header\">Add Contact</div>\n                            <div className=\"card-body\">\n                                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                                    <TextInputGroup\n                                        label=\"Name\"\n                                        name=\"name\"\n                                        placeholder=\"Enter Name\"\n                                        value={name}\n                                        onChange={this.onChange}\n                                        error={errors.name}\n                                    />\n                                    <TextInputGroup\n                                        label=\"Email\"\n                                        name=\"email\"\n                                        type=\"email\"\n                                        placeholder=\"Enter Email\"\n                                        value={email}\n                                        onChange={this.onChange}\n                                        error={errors.email}\n                                    />\n                                    <TextInputGroup\n                                        label=\"Phone\"\n                                        name=\"phone\"\n                                        placeholder=\"Enter Phone Number\"\n                                        value={phone}\n                                        onChange={this.onChange}\n                                        error={errors.phone}\n                                    />\n                                    <input type=\"submit\" value=\"Add Contact\" className=\"btn btn-light btn-block\" />\n                                </form>\n                            </div>\n                        </div>\n                    );\n                }}\n            </Consumer>\n        );\n    }\n}\n\nexport default AddContact;\n","import React, {Component} from 'react';\nimport {Consumer} from '../../context';\nimport TextInputGroup from '../layout/TextInputGroup';\nimport axios from 'axios';\n\nclass EditContact extends Component {\n    state = {\n        name: '',\n        email: '',\n        phone: '',\n        errors: {}\n    };\n\n    async componentDidMount() {\n        const {id} = this.props.match.params;\n        const res = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\n\n        const contact = res.data;\n\n        this.setState({\n            name: contact.name,\n            email: contact.email,\n            phone: contact.phone\n        });\n    }\n\n    onSubmit = async (dispatch, e) => {\n        e.preventDefault();\n\n        const {name, email, phone} = this.state;\n\n        // Check For Errors\n        if (name === '') {\n            this.setState({errors: {name: 'Name is required'}});\n            return;\n        }\n\n        if (email === '') {\n            this.setState({errors: {email: 'Email is required'}});\n            return;\n        }\n\n        if (phone === '') {\n            this.setState({errors: {phone: 'phone number is required'}});\n            return;\n        }\n\n        const updContact = {\n            name,\n            email,\n            phone\n        };\n\n        const {id} = this.props.match.params;\n\n        const res = await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`, updContact);\n\n        dispatch({type: 'UPDATE_CONTACT', payload: res.data});\n\n        // Clear State\n        this.setState({\n            name: '',\n            email: '',\n            phone: '',\n            errors: {}\n        });\n\n        this.props.history.push('/');\n    };\n\n    onChange = (e) => this.setState({[e.target.name]: e.target.value});\n\n    render() {\n        const {name, email, phone, errors} = this.state;\n\n        return (\n            <Consumer>\n                {(value) => {\n                    const {dispatch} = value;\n                    return (\n                        <div className=\"card mb-3\">\n                            <div className=\"card-header\">Edit Contact</div>\n                            <div className=\"card-body\">\n                                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                                    <TextInputGroup\n                                        label=\"Name\"\n                                        name=\"name\"\n                                        placeholder=\"Enter Name\"\n                                        value={name}\n                                        onChange={this.onChange}\n                                        error={errors.name}\n                                    />\n                                    <TextInputGroup\n                                        label=\"Email\"\n                                        name=\"email\"\n                                        type=\"email\"\n                                        placeholder=\"Enter Email\"\n                                        value={email}\n                                        onChange={this.onChange}\n                                        error={errors.email}\n                                    />\n                                    <TextInputGroup\n                                        label=\"Phone\"\n                                        name=\"phone\"\n                                        placeholder=\"Enter Phone Number\"\n                                        value={phone}\n                                        onChange={this.onChange}\n                                        error={errors.phone}\n                                    />\n                                    <input type=\"submit\" value=\"Update Contact\" className=\"btn btn-light btn-block\" />\n                                </form>\n                            </div>\n                        </div>\n                    );\n                }}\n            </Consumer>\n        );\n    }\n}\n\nexport default EditContact;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\n\nconst Header = (props) => {\n    const {branding} = props;\n    return (\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\n            <div className=\"container\">\n                <a href=\"/\" className=\"navbar-brand\">\n                    {branding}\n                </a>\n                <div>\n                    <ul className=\"navbar-nav mr-auto\">\n                        <li className=\"nav-item\">\n                            <Link to=\"/\" className=\"nav-link\">\n                                <i className=\"fas fa-home\"></i> Home\n                            </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to=\"/contact/add\" className=\"nav-link\">\n                                <i className=\"fas fa-plus\"></i> Add\n                            </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to=\"/about\" className=\"nav-link\">\n                                <i className=\"fas fa-question\"></i> About\n                            </Link>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n    );\n};\n\nHeader.defaultProps = {\n    branding: 'My App'\n};\n\nHeader.propTypes = {\n    branding: PropTypes.string.isRequired\n};\n\nexport default Header;\n","import React from 'react';\n\nconst About = () => {\n    return (\n        <div>\n            <h1 className=\"display-4\">About Contact Manager</h1>\n            <p className=\"lead\">Simple app to manage contacts</p>\n            <p className=\"text-secondary\">Version 1.0.0</p>\n        </div>\n    );\n};\n\nexport default About;\n","import React from 'react';\n\nconst NotFound = () => {\n    return (\n        <div>\n            <h1 className=\"display-4\">\n                <span className=\"text-danger\">404</span> Page Not Found\n            </h1>\n            <p className=\"lead\">Sorry, that page does not exist</p>\n        </div>\n    );\n};\n\nexport default NotFound;\n","import React, {Component} from 'react';\n\nclass Test extends Component {\n    state = {\n        title: '',\n        id: '',\n        userId: '',\n        completed: ''\n    };\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/posts/1')\n            .then((response) => response.json())\n            .then((data) =>\n                this.setState({\n                    title: data.title,\n                    body: data.body\n                })\n            );\n    }\n\n    // UNSAFE_componentWillMount() {\n    //   console.log('componentWillMount...');\n    // }\n\n    // componentDidUpdate() {\n    //   console.log('componentDidUpdate...');\n    // }\n\n    // UNSAFE_componentWillUpdate() {\n    //   console.log('componentWillUpdate...');\n    // }\n\n    // UNSAFE_componentWillReceiveProps(nextProps, nextState){\n    //   console.log('componentWillReceiveProps...');\n    // }\n\n    // static getDerivedStateFromProps(nextProps, prevState){\n    //   return {\n    //     test: 'something'\n    //   };\n    // }\n\n    // getSnapshotBeforeUpdate(prevProps, prevState){\n    //   console.log('getSnapshotBeforeUpdate...');\n    // }\n\n    render() {\n        const {title, body} = this.state;\n        return (\n            <div>\n                <h1>Test Component</h1>\n                <h1>Test title: {title}</h1>\n                <p>Test body: {body}</p>\n            </div>\n        );\n    }\n}\n\nexport default Test;\n","import React, {Component} from 'react';\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';\nimport Contacts from './components/contacts/Contacts';\nimport AddContact from './components/contacts/AddContact';\nimport EditContact from './components/contacts/EditContact';\nimport Header from './components/layout/Header';\nimport About from './components/pages/About';\nimport NotFound from './components/pages/NotFound';\nimport Test from './components/test/Test';\n\nimport {Provider} from './context';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <Provider>\n                <Router>\n                    <div className=\"App\">\n                        <Header branding=\"Contact Manager\" />\n                        <div className=\"container\">\n                            <Switch>\n                                <Route exact path=\"/\" component={Contacts} />\n                                <Route exact path=\"/contact/add\" component={AddContact} />\n                                <Route exact path=\"/contact/edit/:id\" component={EditContact} />\n                                <Route exact path=\"/about\" component={About} />\n                                <Route exact path=\"/test\" component={Test} />\n                                <Route component={NotFound} />\n                            </Switch>\n                        </div>\n                    </div>\n                </Router>\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'}\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}